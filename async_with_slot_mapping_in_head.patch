diff --git a/dfp.module b/dfp.module
index b9be29c..3396209 100644
--- a/dfp.module
+++ b/dfp.module
@@ -754,6 +754,8 @@ function _dfp_js_global_settings() {
   $js .= 'googletag.cmd.push(function() {' . "\n";
 
   if (variable_get('dfp_async_rendering', 1)) {
+    $js .= 'var mapping;'. "\n";
+    $js .= implode(_dfp_js_slot_definition());
     $js .= '  googletag.pubads().enableAsyncRendering();' . "\n";
   }
   else {
@@ -800,14 +802,15 @@ function _dfp_js_global_settings() {
   if (variable_get('dfp_async_rendering', 1)) {
     $js .= '});' . "\n";
 
-    $options = array(
-      'type' => 'inline',
-      'group' => JS_DEFAULT,
-      'every_page' => TRUE,
-      'weight' => 10,
-      'force header' => TRUE,
+    $element = array(
+      '#tag' => 'script',
+      '#weight' => 100000,
+      '#value' => str_replace(array("\n", "  "), "", $js),
+      '#attributes' => array(
+        'type' => 'text/javascript'
+      ),
     );
-    drupal_add_js($js, $options);
+    drupal_add_html_head($element, 'dfp_googletag_test');
   } else {
     $element = array(
       '#tag' => 'script',
@@ -826,73 +829,65 @@ function _dfp_js_global_settings() {
  * Helper function to build the javascript needed to define an ad slot and add
  * it to the head tag.
  */
-function _dfp_js_slot_definition($tag) {
+function _dfp_js_slot_definition($tag = NULL) {
+  $tagArray = &drupal_static(__FUNCTION__, array());
   // Add the js needed to define this adSlot to <head>.
-  $js = '';
-
-  if (variable_get('dfp_async_rendering', 1)) {
-    $js = 'googletag.cmd.push(function() {';
-  }
-  // Start by defining breakpoints for this ad.
-  if (!empty($tag->breakpoints)) {
-    $breakpoints = $tag->breakpoints;
-    $js .= 'var mapping = googletag.sizeMapping()' . "\n";
-    foreach ($breakpoints as $breakpoint) {
-      $js .= '  .addSize(' . dfp_format_size($breakpoint['browser_size']) . ', ' . dfp_format_size($breakpoint['ad_sizes']) . ')' . "\n";
+  if (!empty($tag)) {
+    $js = '';
+
+    // Start by defining breakpoints for this ad.
+    if (!empty($tag->breakpoints)) {
+      $breakpoints = $tag->breakpoints;
+      $js .= 'mapping = googletag.sizeMapping()' . "\n";
+      foreach ($breakpoints as $breakpoint) {
+        $js .= '  .addSize(' . dfp_format_size($breakpoint['browser_size']) . ', ' . dfp_format_size($breakpoint['ad_sizes']) . ')' . "\n";
+      }
+      $js .= '  .build();' . "\n";
     }
-    $js .= '  .build();' . "\n";
-  }
-  if (!empty($tag->settings['out_of_page'])) {
-    $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineOutOfPageSlot("' . $tag->adunit . '", "' . $tag->placeholder_id . '")' . "\n";
-  }
-  else {
-    $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineSlot("' . $tag->adunit . '", ' . $tag->size . ', "' . $tag->placeholder_id . '")' . "\n";
-  }
-  $click_url = variable_get('dfp_click_url', '');
-  if (!empty($click_url)) {
-    if (!preg_match("/^https?:\/\//", $click_url)) {
-      // relative URL; prepend site domain
-      $click_url = (($GLOBALS['is_https']) ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . "/" . $click_url;
+    if (!empty($tag->settings['out_of_page'])) {
+      $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineOutOfPageSlot("' . $tag->adunit . '", "' . $tag->placeholder_id . '")' . "\n";
     }
-    $js .= '  .setClickUrl("' . $click_url . '")' . "\n";
-  }
-  $js .= '  .addService(googletag.pubads())' . "\n";
+    else {
+      $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineSlot("' . $tag->adunit . '", ' . $tag->size . ', "' . $tag->placeholder_id . '")' . "\n";
+    }
+    $click_url = variable_get('dfp_click_url', '');
+    if (!empty($click_url)) {
+      if (!preg_match("/^https?:\/\//", $click_url)) {
+        // relative URL; prepend site domain
+        $click_url = (($GLOBALS['is_https']) ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . "/" . $click_url;
+      }
+      $js .= '  .setClickUrl("' . $click_url . '")' . "\n";
+    }
+    $js .= '  .addService(googletag.pubads())' . "\n";
 
-  if (!empty($tag->adsense_ad_types)) {
-    $js .= '  .set("adsense_ad_types", "' . $tag->adsense_ad_types . '")' . "\n";
-  }
-  if (!empty($tag->adsense_channel_ids)) {
-    $js .= '  .set("adsense_channel_ids", "' . $tag->adsense_channel_ids . '")' . "\n";
-  }
-  foreach ($tag->adsense_colors as $key => $val) {
-    if (!empty($val)) {
-      $key = 'adsense_' . $key . '_color';
-      $val = '#' . drupal_strtoupper($val);
-      $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
+    if (!empty($tag->adsense_ad_types)) {
+      $js .= '  .set("adsense_ad_types", "' . $tag->adsense_ad_types . '")' . "\n";
+    }
+    if (!empty($tag->adsense_channel_ids)) {
+      $js .= '  .set("adsense_channel_ids", "' . $tag->adsense_channel_ids . '")' . "\n";
+    }
+    foreach ($tag->adsense_colors as $key => $val) {
+      if (!empty($val)) {
+        $key = 'adsense_' . $key . '_color';
+        $val = '#' . drupal_strtoupper($val);
+        $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
+      }
+    }
+    $targeting = dfp_format_targeting($tag->targeting, $tag);
+    foreach ($targeting as $target) {
+      $js .= '  .setTargeting(' . $target['target'] . ', ' . $target['value'] . ')' . "\n";
+    }
+    // Apply size mapping when there are breakpoints.
+    if (!empty($tag->breakpoints)) {
+      $js .= '  .defineSizeMapping(mapping)' . "\n";
     }
-  }
-  $targeting = dfp_format_targeting($tag->targeting, $tag);
-  foreach ($targeting as $target) {
-    $js .= '  .setTargeting(' . $target['target'] . ', ' . $target['value'] . ')' . "\n";
-  }
-  // Apply size mapping when there are breakpoints.
-  if (!empty($tag->breakpoints)) {
-    $js .= '  .defineSizeMapping(mapping)' . "\n";
-  }
-  // Closing googletag.cmd.push
-  if (variable_get('dfp_async_rendering', 1)) {
-    $js .= ' })';
-  }
 
-  $js = rtrim($js, "\n") . ';';
+    $js = rtrim($js, "\n") . ';'."\n";
 
-  $options = array(
-    'type' => 'inline',
-    'group' => JS_LIBRARY,
-    'weight' => 0,
-  );
+    $tagArray[] = $js;
+  }
 
-  drupal_add_js($js, $options);
+  return $tagArray;
 }
 
 /**
