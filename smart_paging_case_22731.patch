diff --git a/smart_paging.info b/smart_paging.info
index bdde494..4b0df49 100644
--- a/smart_paging.info
+++ b/smart_paging.info
@@ -8,3 +8,10 @@ files[] = smart_paging.tokens.inc
 files[] = includes/smart_paging.admin.inc
 dependencies[] = filter
 configure = admin/config/content/smart_paging
+
+
+; Information added by drush on 2014-10-17
+version = "9aee1dcf979b6e42e6c6ce65ec39f6bd328b6cc2"
+project = "smart_paging"
+datestamp = "1413543912"
+
diff --git a/smart_paging.module b/smart_paging.module
index 64abb63..0859401 100644
--- a/smart_paging.module
+++ b/smart_paging.module
@@ -28,7 +28,7 @@ define('SMART_PAGING_MAX_WORD_LIMIT', 512);
  *
  * @return
  *   An array with the menu path, callback, and parameters.
- */ 
+ */
 function smart_paging_menu() {
   $items = array();
   $items['admin/config/content/smart_paging'] = array(
@@ -182,7 +182,7 @@ function smart_paging_form_alter(&$form, &$form_state, $form_id) {
       drupal_add_js($smart_paging_js, 'setting');
       drupal_add_js(drupal_get_path('module', 'smart_paging') . '/js/smart_paging-config.js');
       $entity_type = $form['#entity_type'];
-      $entity_info = entity_get_info($entity_type);      
+      $entity_info = entity_get_info($entity_type);
       if (isset($form_state['term']->{$entity_info['entity keys']['id']})) {
         $entity_id = $form_state['term']->{$entity_info['entity keys']['id']};
       }
@@ -201,7 +201,7 @@ function smart_paging_form_alter(&$form, &$form_state, $form_id) {
         $form_state['storage']['smart_paging_entity_type'] = $entity_type;
       }
       $fieldset_label = t('Smart Paging settings');
-      $form['smart_paging_settings'] = array(              
+      $form['smart_paging_settings'] = array(
         '#type'        => 'fieldset',
         '#title'       => $fieldset_label,
         '#description' => t('Remember to enable the Smart Paging input filter at !formats to be able to use this feature at your selected text format of filtered text field(s).', array('!formats' => l(t('Text formats settings page'), 'admin/config/content/formats'))),
@@ -237,7 +237,7 @@ function smart_paging_form_alter(&$form, &$form_state, $form_id) {
         $smart_paging_js['smart_paging']['fieldset_label'] = $fieldset_label;
         $smart_paging_js['smart_paging']['default_method'] = $default_method;
         drupal_add_js($smart_paging_js, 'setting');
-        $form['smart_paging_settings'] += array(              
+        $form['smart_paging_settings'] += array(
           '#attached'    => array(
             'js' => array(drupal_get_path('module', 'smart_paging') . '/js/smart_paging-admin.js'),
           ),
@@ -245,12 +245,12 @@ function smart_paging_form_alter(&$form, &$form_state, $form_id) {
         );
       }
       $form['smart_paging_settings']['smart_paging_use_default'] = array(
-        '#type'  => 'checkbox', 
+        '#type'  => 'checkbox',
         '#title' => t('Use default values'),
         '#default_value' => isset($smart_paging_config['use_default']) ? $smart_paging_config['use_default'] : TRUE,
       );
       $form['smart_paging_settings']['smart_paging_method'] = array(
-        '#type'          => 'select', 
+        '#type'          => 'select',
         '#title'         => t('Page break method'),
         '#default_value' => isset($smart_paging_config['method']) ? $smart_paging_config['method'] : variable_get('smart_paging_method', SMART_PAGING_PLACEHOLDER_METHOD),
         '#options'       => $method_options,
@@ -269,7 +269,7 @@ function smart_paging_form_alter(&$form, &$form_state, $form_id) {
         '#states'        => array(
           'visible' => array(
             ':input[name="smart_paging_method"]' => array(
-              'value'   => (string) SMART_PAGING_PLACEHOLDER_METHOD, 
+              'value'   => (string) SMART_PAGING_PLACEHOLDER_METHOD,
               'enabled' => TRUE,
             ),
           ),
@@ -573,7 +573,7 @@ function smart_paging_url_outbound_alter(&$path, &$options, $original_path) {
       }
       else {
         $alias = drupal_get_path_alias($original_path, $language);
-      } 
+      }
       if ($alias != $original_path) {
         $path = $alias;
         $options['alias'] = TRUE;
@@ -651,13 +651,13 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
         if (is_numeric($delta) && isset($field_content['#markup'])) {
           if (strpos($field_content['#markup'], '<!--smart_paging_autop_filter-->') !== FALSE) {
             $use_autop = TRUE;
-            $field_content['#markup'] = str_replace('<!--smart_paging_autop_filter-->', '', $field_content['#markup']); 
+            $field_content['#markup'] = str_replace('<!--smart_paging_autop_filter-->', '', $field_content['#markup']);
           }
           $is_smart_paging_filter_found = strpos($field_content['#markup'], '<!--smart_paging_filter-->');
           $is_smart_paging_filter_done_found = strpos($field_content['#markup'], '<!--smart_paging_filter_done-->');
           if ($is_smart_paging_filter_found !== FALSE || $is_smart_paging_filter_done_found !== FALSE) {
             $entity_type = $context['entity_type'];
-            $entity_info = entity_get_info($entity_type);            
+            $entity_info = entity_get_info($entity_type);
             $entity_id   = $context['entity']->{$entity_info['entity keys']['id']};
             $language    = isset($build[$field_name]['#language']) ? $build[$field_name]['#language'] : 'und';
             if ($display_settings['settings']['smart_paging_settings_context'] == 'content_type') {
@@ -719,29 +719,27 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
             // Default this to 'no method' if it's being called as a full page
             $query_parameters = drupal_get_query_parameters();
             if (isset($query_parameters['nopaging'])) {
-              // @TODO: Somewhat duplicated from below pagination code. Refactor candidate.
-              $get = drupal_get_query_parameters();
-              // Do we want nopaging as canonical instead of current page?
+              //Somewhat duplicated from below pagination code. Refactor candidate.
+              //Build url representation of current page. Using an absolute url allows outbound url hooks to modify the domain if necessary (domain module).
+              $current_absolute_alias = url($_GET['q'], array('absolute' => TRUE));
+              //Do we want nopaging as canonical instead of current page?
               if (variable_get('smart_paging_use_nopaging_canonical', FALSE)) {
-                $get['nopaging'] = 1;
+                $link_current_page = $current_absolute_alias . '?nopaging=1';
+              }
+              //No. Make current paginated page canonical.
+              else {
+                $link_current_page = $current_absolute_alias;
               }
-              // Build url representation of current page. Using an absolute url allows outbound 
-              // url hooks to modify the domain if necessary (domain module).
-              $link_current_page = url($_GET['q'], array(
-                'absolute' => TRUE,
-                'query'    => $get,
-              ));
-              // By default add a canonical head element here. We will clean up any duplicates 
-              // in the hook.
+              //by default add a canonical head element here. We will clean up any duplicates in the hook.
               drupal_add_html_head(array(
                 '#attributes' => array(
-                  'rel'  => 'canonical',
-                  'href' => $link_current_page,
-                ),
+                'rel'  => 'canonical',
+                'href' => $link_current_page,
+                  ),
                 '#tag' => 'link',
-                '#attached' => array(
-                  'drupal_add_http_header' => array(array('Link', '<' . $link_current_page . '>; rel="canonical"', 1)),
-                ),
+               '#attached' => array(
+                      'drupal_add_http_header' => array(array('Link', '<' . $link_current_page . '>; rel="canonical"', 1)),
+                  ),
               ), 'smart_paging_link_canonical');
               // If set, use "Convert line breaks into HTML" filter
               if (isset($use_autop)) {
@@ -851,7 +849,7 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
                 $pagebreak[$index] = _filter_autop($content_value);
               }
             }
-           
+
             $markup_content = implode($placeholder, $pagebreak);
             // Don't save to cache when node is in Preview mode
             if (isset($context['entity']->op) && $context['entity']->op != 'Preview') {
@@ -924,7 +922,7 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
         }
       }
     }
-    
+
     if (!empty($total_page)) {
       global $base_url;
       $current_url = function_exists("path_alias_xt_get_path_alias") ? path_alias_xt_get_path_alias($_GET['q']) : drupal_get_path_alias($_GET['q']);
@@ -953,39 +951,35 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
       else {
         $pager_prefix = 'page=' . $pager_details['first_element'];
       }
-      $get = drupal_get_query_parameters();
-      $q   = $_GET['q'];
-      // Do we want nopaging as canonical instead of current page?
+      //Build url representation of current page. Using an absolute url allows outbound url hooks to modify the domain if necessary (domain module).
+      $current_absolute_alias = url($_GET['q'], array('absolute' => TRUE));
+      $url_suffix = array();
+      //Do we want nopaging as canonical instead of current page?
       if (variable_get('smart_paging_use_nopaging_canonical', FALSE)) {
-        $get['nopaging'] = 1;
+        $link_current_page = $current_absolute_alias . '?nopaging=1';
       }
-      elseif ($current_page != 0) {
-        // No. Make current paginated page canonical.
-        if ($enable_clean_url) {
-          $q .= "/$pager_prefix/$current_page";
+      //No. Make current paginated page canonical.
+      else {
+        if ($current_page == 0) {
+          // We are on first page
+          $link_current_page = $current_absolute_alias;
         }
-        else {
-          $get[$pager_prefix] = $current_page;
+        else{
+          $link_current_page = $enable_clean_url ? "$current_absolute_alias/$pager_prefix/" . $current_page : "$current_absolute_alias?$pager_prefix%2C" . $current_page;
         }
       }
-      // Build url representation of current page. Using an absolute url allows outbound 
-      // url hooks to modify the domain if necessary (domain module).
-      $link_current_page = url($_GET['q'], array(
-        'absolute' => TRUE,
-        'query'    => $get,
-      ));
-      // By default add a canonical head element here. We will clean up any duplicates in the hook.
-      drupal_add_html_head(array(
-        '#attributes' => array(
-          'rel'  => 'canonical',
-          'href' => $link_current_page,
-        ),
-        '#tag' => 'link',
-        '#attached' => array(
-          'drupal_add_http_header' => array(array('Link', '<' . $link_current_page . '>; rel="canonical"', 1)),
-        ),
-      ), 'smart_paging_link_canonical');
 
+      //by default add a canonical head element here. We will clean up any duplicates in the hook.
+      drupal_add_html_head(array(
+              '#attributes' => array(
+              'rel'  => 'canonical',
+              'href' => $link_current_page,
+            ),
+            '#tag' => 'link',
+            '#attached' => array(
+                    'drupal_add_http_header' => array(array('Link', '<' . $link_current_page . '>; rel="canonical"', 1)),
+              ),
+          ), 'smart_paging_link_canonical');
       if (variable_get('smart_paging_use_link_rel', TRUE)) {
         // Pagination with rel="next" and rel="prev"
         // Ref: http://googlewebmastercentral.blogspot.co.uk/2011/09/pagination-with-relnext-and-relprev.html
@@ -1068,13 +1062,13 @@ function smart_paging_field_attach_view_alter(&$build, $context) {
           if (isset($field_content['#markup']) && strpos($field_content['#markup'], '<!--smart_paging_filter-->') !== FALSE) {
             $markup_content = $field_content['#markup'];
             // Remove the Smart Paging input filter marker and placeholder for comment entity
-            $markup_content = str_replace('<!--smart_paging_filter-->', '', $markup_content);            
+            $markup_content = str_replace('<!--smart_paging_filter-->', '', $markup_content);
             $markup_content = str_replace(variable_get('smart_paging_pagebreak', '<!--pagebreak-->'), '', $markup_content);
             $build[$field_name][$delta]['#markup'] = $markup_content;
           }
           if (isset($field_content['#markup']) && strpos($field_content['#markup'], '<!--smart_paging_autop_filter-->') !== FALSE) {
             $markup_content = $build[$field_name][$delta]['#markup'];
-            $markup_content = str_replace('<!--smart_paging_autop_filter-->', '', $markup_content); 
+            $markup_content = str_replace('<!--smart_paging_autop_filter-->', '', $markup_content);
             $build[$field_name][$delta]['#markup'] = _filter_autop($markup_content);
           }
         }
@@ -1096,7 +1090,7 @@ function smart_paging_html_head_alter(&$head_elements) {
 	   $current_alias = function_exists('path_alias_xt_get_path_alias') ? path_alias_xt_get_path_alias($_GET['q']) : drupal_get_path_alias($_GET['q']);
     $current_absolute_alias = url($_GET['q'], array('absolute' => TRUE));
     $override_canonical = array();
-    // Collect other existing canonical element(s)    
+    // Collect other existing canonical element(s)
     foreach ($head_elements as $head_element_key => $head_element) {
       $canonical_tag = isset($head_element['#tag']) && $head_element['#tag'] == 'link' && isset($head_element['#attributes']) && $head_element['#attributes']['rel'] == 'canonical';
       $canonical_metatag = $head_element_key == 'metatag_canonical';
@@ -1133,14 +1127,14 @@ function smart_paging_html_head_alter(&$head_elements) {
   if (isset($head_elements['smart_paging_seo'])) {
     $smart_paging_seo = json_decode($head_elements['smart_paging_seo']['#attributes']['content']);
     $tags = array();
-    
+
     if (!empty($smart_paging_seo)) {
       foreach ($smart_paging_seo as $tag => $tag_content) {
         $target_tag = explode('_', $tag);
         if (isset($target_tag[0]) && isset($target_tag[1]) && isset($target_tag[2]) && isset($target_tag[3])) {
           $tags[$target_tag[2]] = array(
             'attr_name' => $target_tag[1],
-            'tag' => $target_tag[0], 
+            'tag' => $target_tag[0],
             'content_attr' => $target_tag[3],
             'content' => $tag_content,
           );
@@ -1165,12 +1159,12 @@ function smart_paging_html_head_alter(&$head_elements) {
     unset($head_elements['smart_paging_seo']);
     if (!empty($tags)) {
       foreach ($tags as $target_name => $attr) {
-        $head_elements["smart_paging_$target_name"] = array(	
+        $head_elements["smart_paging_$target_name"] = array(
           '#type' => 'html_tag',
           '#tag'  => $attr['tag'],
           '#attributes'	=> array(
             $attr['attr_name']    => $target_name,
-            $attr['content_attr'] => $attr['content'],			
+            $attr['content_attr'] => $attr['content'],
           ),
         );
         unset($tags[$target_name]);
@@ -1287,7 +1281,7 @@ function smart_paging_field_extra_fields($get_defaults = FALSE) {
       $extra['taxonomy_term'][$vocabulary->machine_name] = $defaults;
     }
   }
-  
+
   if (!$get_defaults) {
     return $extra;
   }
@@ -1301,7 +1295,7 @@ function smart_paging_field_extra_fields($get_defaults = FALSE) {
  */
 function smart_paging_field_formatter_settings_form($build, $summary = NULL) {
   $display_stored   = field_bundle_settings($build['#entity_type'], $build['#bundle']);
-  $display_defaults = smart_paging_field_extra_fields(TRUE);    
+  $display_defaults = smart_paging_field_extra_fields(TRUE);
   if (!empty($summary)) {
     $display['settings'] = $summary;
   }
@@ -1325,7 +1319,7 @@ function smart_paging_field_formatter_settings_form($build, $summary = NULL) {
     ),
   );
   $form['smart_paging_method'] = array(
-    '#type'          => 'select', 
+    '#type'          => 'select',
     '#title'         => t('Page break method'),
     '#default_value' => isset($display['settings']['smart_paging_method']) ? $display['settings']['smart_paging_method'] : variable_get('smart_paging_method', SMART_PAGING_PLACEHOLDER_METHOD),
     '#options'       => _smart_paging_method_list(),
@@ -1400,7 +1394,7 @@ function _smart_paging_display_overview_form_submit($form, &$form_state) {
  */
 function smart_paging_field_formatter_settings_summary($build, $summary = NULL) {
   $display_stored   = field_bundle_settings($build['#entity_type'], $build['#bundle']);
-  $display_defaults = smart_paging_field_extra_fields(TRUE);  
+  $display_defaults = smart_paging_field_extra_fields(TRUE);
   if (!empty($summary)) {
     $display['settings'] = $summary;
   }
@@ -1554,20 +1548,20 @@ function smart_paging_metatag_metatags_view_alter(&$output, $instance) {
 function smart_paging_help($path, $arg) {
   switch ($path) {
     case 'admin/help#smart_paging':
-      return '<p>' . 
-      t('Provides splitting up long Drupal content into sub pages by number of characters/words or by 
-      a placeholder HTML tag. Smart Paging feature can be applied only to CCK fields (with text format) 
-      of node, user and taxonomy term entities (Note: "Description" field of taxonomy term is not a CCK 
-      field). URL for sub pages made more SEO friendly and works even for aliased URL path. The user has 
-      more control over Smart Paging configuration. An option is provided at "Manage Display" page of an 
-      entity type whether to control Smart Paging display behavior during content editing or at "Manage 
-      Display" page itself. Weight and visibility of Smart Paging can also be controlled at "Manage 
-      Display" page of an entity type.') . '</p><p>' . 
-      t('It splits complex HTML markup content more accurately:') . 
+      return '<p>' .
+      t('Provides splitting up long Drupal content into sub pages by number of characters/words or by
+      a placeholder HTML tag. Smart Paging feature can be applied only to CCK fields (with text format)
+      of node, user and taxonomy term entities (Note: "Description" field of taxonomy term is not a CCK
+      field). URL for sub pages made more SEO friendly and works even for aliased URL path. The user has
+      more control over Smart Paging configuration. An option is provided at "Manage Display" page of an
+      entity type whether to control Smart Paging display behavior during content editing or at "Manage
+      Display" page itself. Weight and visibility of Smart Paging can also be controlled at "Manage
+      Display" page of an entity type.') . '</p><p>' .
+      t('It splits complex HTML markup content more accurately:') .
       '</p><div class="messages"><pre>
 &lt;div class="text-important"&gt;
   &lt;p class="info"&gt;
-  Long content paragraph... 
+  Long content paragraph...
 &lt;!--pagebreak--&gt;
   Continuation of long content paragraph.
   &lt;/p&gt;
@@ -1584,7 +1578,7 @@ function smart_paging_help($path, $arg) {
       http://www.example.com/node/1</p><div class="messages"><pre>
 &lt;div class="text-important"&gt;
   &lt;p class="info"&gt;
-  Long content paragraph... 
+  Long content paragraph...
   &lt;/p&gt;
 &lt;/div&gt;</pre></div>
       <p>' . t(' - Page 2 - ') . '<br />
@@ -1597,7 +1591,7 @@ function smart_paging_help($path, $arg) {
     &lt;li&gt;List #1&lt;/li&gt;
     &lt;li&gt;Long list #2...&lt;/li&gt;
   &lt;/ul&gt;
-&lt;/div&gt;</pre></div> 
+&lt;/div&gt;</pre></div>
       <p>' . t(' - Page 3 - ') . '<br />
       http://www.example.com/node/1/page/0/2</p><div class="messages"><pre>
 &lt;div class="text-important"&gt;
@@ -1643,7 +1637,7 @@ function smart_page_break_insert_placeholder($text, $placeholder = NULL) {
     if ($break_index) {
       $break_start = $break_positions[$break_index - 1];
       $break_map[$break_end] = array_slice($split, $break_start, ($break_end - $break_start), TRUE);
-      // Remove the placeholder from the structure 
+      // Remove the placeholder from the structure
       unset($break_map[$break_end][$break_start]);
     }
     else {
@@ -1728,12 +1722,12 @@ function smart_page_pair_tags($text) {
  */
 function _smart_paging_method_list() {
   $methods = &drupal_static(__FUNCTION__);
-  
+
   if (!isset($methods)) {
     $methods = array(
       SMART_PAGING_NO_METHOD              => t('Bypass Smart Paging input filter'),
-      SMART_PAGING_PLACEHOLDER_METHOD     => t('Manual placement of page break placeholder'), 
-      SMART_PAGING_CHARACTER_LIMIT_METHOD => t('Automatic page break by character limit'), 
+      SMART_PAGING_PLACEHOLDER_METHOD     => t('Manual placement of page break placeholder'),
+      SMART_PAGING_CHARACTER_LIMIT_METHOD => t('Automatic page break by character limit'),
       SMART_PAGING_WORD_LIMIT_METHOD      => t('Automatic page break by word limit'),
     );
   }
